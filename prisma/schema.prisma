// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String    @db.VarChar(255)
  lastName      String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  emailVerified Int       @db.Int // should it be a Boolean
  emailToken    String    @db.VarChar(255)
  resPassword   Int       @db.Int
  resPassToken  String    @db.VarChar(255)
  registeredAt  DateTime  @default(now())
  role          Role      @default(USER)
  // The relation fields below do not exist in the DB. These are used to generate the Prisma Client
  writtenPosts  Post[]    @relation("WrittenPosts")
  favoritePosts Post[]    @relation("FavPosts")
  tours         Tour[]
  comments      Comment[]
}

model Post {
  id            Int       @id @default(autoincrement())
  postCreatedAt DateTime  @default(now())
  postUpdatedAt DateTime  @updatedAt
  title         String    @db.VarChar(255)
  content       String?
  published     Boolean   @default(false)
  author        User      @relation("WrittenPosts", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId      Int // relation scalar field  (used in the `@relation` attribute above)
  favoritedBy   User?     @relation("FavPosts", fields: [favoritedById], references: [id])
  favoritedById Int?
  tours         Tour?     @relation(fields: [tourId], references: [id])
  tourId        Int?
  comments      Comment[]
}

model Tour {
  id              Int      @id @default(autoincrement())
  tourCreatedAt   DateTime @default(now())
  tourUpdatedAt   DateTime @updatedAt
  tourTitle       String   @db.VarChar(255)
  tourDescription String?
  tourPosts       Post[]
  tourAuthor      User     @relation(fields: [tourAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourAuthorId    Int
}

model Comment {
  id              Int    @id @default(autoincrement())
  content         String
  commentAuthor   User   @relation(fields: [commentAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentAuthorId Int
  commentPost     Post?  @relation(fields: [commentPostId], references: [id])
  commentPostId   Int?
}

enum Role {
  USER
  ADMIN
}
