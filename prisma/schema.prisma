generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  // firstName String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  writtenPosts  Page[]    @relation("WrittenPages")
  favoritePosts Page[]    @relation("FavPages")
  tours         Tour[]
  comments      Comment[]
  role          Role      @default(USER)
  password      String?
  verifyEmail   Boolean?  @default(false) // oldField emailVerified renamed to verifyEmail
  emailToken    String?
  resPassword   Int?
  resPassToken  String?
  registeredAt  DateTime? @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id            String    @id @default(cuid())
  pageCreatedAt DateTime  @default(now())
  pageUpdatedAt DateTime  @updatedAt
  title         String    @db.VarChar(255)
  content       String?   @db.Text
  published     Boolean   @default(false)
  author        User      @relation("WrittenPages", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId      String // relation scalar field  (used in the `@relation` attribute above)
  favoritedBy   User?     @relation("FavPages", fields: [favoritedById], references: [id])
  favoritedById String?
  tours         Tour?     @relation(fields: [tourId], references: [id])
  tourId        String?
  comments      Comment[]
}

model Tour {
  id              String   @id @default(cuid())
  tourCreatedAt   DateTime @default(now())
  tourUpdatedAt   DateTime @updatedAt
  tourTitle       String
  tourDescription String?  @db.VarChar(255)
  tourPages       Page[]
  tourAuthor      User     @relation(fields: [tourAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourAuthorId    String
}

model Comment {
  id              String  @id @default(cuid())
  content         String
  commentAuthor   User    @relation(fields: [commentAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentAuthorId String
  commentPage     Page?   @relation(fields: [commentPageId], references: [id])
  commentPageId   String?
}

enum Role {
  USER
  ADMIN
}
